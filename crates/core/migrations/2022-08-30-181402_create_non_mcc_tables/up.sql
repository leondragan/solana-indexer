SELECT DISTINCT M.SYMBOL,
	MC.CREATOR_ADDRESS,
	T.NAME,
	T.FAMILY INTO TABLE TEMP_ME_COLLECTIONS
FROM METADATAS M
INNER JOIN METADATA_CREATORS MC ON MC.METADATA_ADDRESS = M.ADDRESS
INNER JOIN PURCHASES P ON P.METADATA = M.ADDRESS
LEFT JOIN METADATA_COLLECTIONS T ON T.METADATA_ADDRESS = M.address
WHERE P.AUCTION_HOUSE = 'E8cU1WiRWjanGxmn96ewBgk9vPTcL6AEZ1t6F6fkgUWe'
	AND MC.VERIFIED = TRUE
	AND MC.POSITION = 0
GROUP BY (M.SYMBOL, MC.CREATOR_ADDRESS, T.NAME, T.FAMILY)
HAVING COUNT(*) >= 100;

SELECT SYMBOL, NAME, FAMILY INTO TEMP_ME_COLLECTIONS_2
FROM
	(SELECT SYMBOL, NAME, FAMILY
		FROM TEMP_ME_COLLECTIONS
		WHERE NAME IS NOT NULL
			AND FAMILY IS NOT NULL
		GROUP BY (SYMBOL, NAME, FAMILY)
		UNION ALL SELECT SYMBOL, NAME, FAMILY
		FROM TEMP_ME_COLLECTIONS
		WHERE NAME IS NULL
			AND FAMILY IS NULL) AS C;

ALTER TABLE TEMP_ME_COLLECTIONS_2 ADD COLUMN ID UUID DEFAULT GEN_RANDOM_UUID() PRIMARY KEY;

ALTER TABLE TEMP_ME_COLLECTIONS ADD COLUMN ID UUID;

UPDATE TEMP_ME_COLLECTIONS
SET ID = V2.ID
FROM TEMP_ME_COLLECTIONS V1
INNER JOIN TEMP_ME_COLLECTIONS_2 V2 ON V1.SYMBOL = V2.SYMBOL
AND V1.NAME IS NOT DISTINCT
FROM V2.NAME
AND V1.FAMILY IS NOT DISTINCT
FROM V2.FAMILY
WHERE V1.FAMILY IS NOT NULL
	AND V1.NAME IS NOT NULL
	AND TEMP_ME_COLLECTIONS.SYMBOL = V1.SYMBOL
	AND TEMP_ME_COLLECTIONS.NAME IS NOT DISTINCT
	FROM V1.NAME
	AND TEMP_ME_COLLECTIONS.FAMILY IS NOT DISTINCT
	FROM V1.FAMILY;

CREATE TEMP TABLE DISTINCT_ME_IDS AS
	(SELECT DISTINCT ON (V1.SYMBOL, V1.CREATOR_ADDRESS, V2.SYMBOL, V2.ID) V1.SYMBOL,
			V1.CREATOR_ADDRESS,
			V2.ID
		FROM TEMP_ME_COLLECTIONS V1
		INNER JOIN TEMP_ME_COLLECTIONS_2 V2 ON V1.SYMBOL = V2.SYMBOL
		WHERE V1.FAMILY IS NULL
			AND V1.NAME IS NULL
			AND V2.FAMILY IS NULL
			AND V2.NAME IS NULL );

UPDATE TEMP_ME_COLLECTIONS
SET ID = V2.ID
FROM TEMP_ME_COLLECTIONS V1
INNER JOIN DISTINCT_ME_IDS V2 ON V1.SYMBOL = V2.SYMBOL
AND V1.CREATOR_ADDRESS = V2.CREATOR_ADDRESS
WHERE V1.FAMILY IS NULL
	AND V1.NAME IS NULL
	AND TEMP_ME_COLLECTIONS.SYMBOL = V1.SYMBOL
	AND TEMP_ME_COLLECTIONS.NAME IS NULL
	AND TEMP_ME_COLLECTIONS.FAMILY IS NULL
	AND TEMP_ME_COLLECTIONS.CREATOR_ADDRESS = V1.CREATOR_ADDRESS;

DROP TABLE DISTINCT_ME_IDS;

CREATE TABLE TEMP_ME_METADATA_COLLECTIONS AS
	(SELECT M.ADDRESS AS METADATA_ADDRESS,
			C.ID AS COLLECTION_ID
		FROM TEMP_ME_COLLECTIONS C
		INNER JOIN TEMP_ME_COLLECTIONS CC ON C.ID = CC.ID
		INNER JOIN METADATA_CREATORS MC ON MC.CREATOR_ADDRESS = C.CREATOR_ADDRESS
		INNER JOIN METADATAS M ON M.ADDRESS = MC.METADATA_ADDRESS
		AND M.SYMBOL = CC.SYMBOL
		INNER JOIN METADATA_COLLECTIONS TC ON TC.METADATA_ADDRESS = M.ADDRESS
		AND TC.NAME IS NOT DISTINCT
		FROM CC.NAME
		AND TC.FAMILY IS NOT DISTINCT
		FROM CC.FAMILY);

DELETE
FROM TEMP_ME_METADATA_COLLECTIONS
WHERE METADATA_ADDRESS in
		(SELECT METADATA_ADDRESS
			FROM METADATA_COLLECTION_KEYS);

DELETE
FROM TEMP_ME_COLLECTIONS_2
WHERE ID in
		(SELECT MC.ID
			FROM TEMP_ME_COLLECTIONS_2 MC
			LEFT JOIN TEMP_ME_METADATA_COLLECTIONS T ON MC.ID = T.COLLECTION_ID
			WHERE T.COLLECTION_ID IS NULL);

DELETE
FROM TEMP_ME_COLLECTIONS
WHERE ID in
		(SELECT MC.ID
			FROM TEMP_ME_COLLECTIONS MC
			LEFT JOIN TEMP_ME_METADATA_COLLECTIONS T ON MC.ID = T.COLLECTION_ID
			WHERE T.COLLECTION_ID IS NULL);


DROP TABLE IF EXISTS ME_METADATA_COLLECTIONS;

CREATE TABLE ME_METADATA_COLLECTIONS AS
	(SELECT DISTINCT *
		FROM TEMP_ME_METADATA_COLLECTIONS);

ALTER TABLE ME_METADATA_COLLECTIONS ADD PRIMARY KEY (METADATA_ADDRESS, COLLECTION_ID);

DROP TABLE TEMP_ME_COLLECTIONS;

DROP TABLE IF EXISTS ME_COLLECTIONS;

ALTER TABLE TEMP_ME_COLLECTIONS_2 RENAME TO ME_COLLECTIONS;

DROP TABLE TEMP_ME_METADATA_COLLECTIONS;


-- add image col to me_collections table

ALTER TABLE ME_COLLECTIONS ADD COLUMN IMAGE TEXT NOT NULL DEFAULT '';

UPDATE ME_COLLECTIONS
SET IMAGE = M.IMAGE
FROM
	(SELECT C.ID AS COLLECTION_ID,
			MJ.IMAGE AS IMAGE
		FROM ME_COLLECTIONS C
		INNER JOIN ME_METADATA_COLLECTIONS MC1 ON MC1.METADATA_ADDRESS =
			(SELECT METADATA_ADDRESS
				FROM ME_METADATA_COLLECTIONS MC2
				WHERE C.ID = MC2.COLLECTION_ID
				LIMIT 1)
		INNER JOIN METADATA_JSONS MJ ON MJ.METADATA_ADDRESS = MC1.METADATA_ADDRESS) M
WHERE ME_COLLECTIONS.ID = M.COLLECTION_ID;

-- me_collection_stats

create table if not exists me_collection_stats (
  collection_id       uuid 		  primary key,
  nft_count           bigint      not null,
  floor_price         bigint      null
);


insert into me_collection_stats (collection_id, nft_count, floor_price)
with
    nft_count_table as (
        select
            me_metadata_collections.collection_id as collection_id,
            count(me_metadata_collections.metadata_address) as nft_count
        from me_metadata_collections
        group by me_metadata_collections.collection_id
    ),

    floor_price_table as (
        select
            me_metadata_collections.collection_id as collection_id,
            min(listings.price) as floor_price
        from listings
        inner join metadatas on (listings.metadata = metadatas.address)
        inner join me_metadata_collections
            on (metadatas.address = me_metadata_collections.metadata_address)
        where
            listings.marketplace_program = 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K'
            and listings.purchase_id is null
            and listings.canceled_at is null
        group by me_metadata_collections.collection_id
    )

select
    nft_count_table.collection_id,
    nft_count_table.nft_count,
    floor_price_table.floor_price
from nft_count_table, floor_price_table
where nft_count_table.collection_id = floor_price_table.collection_id;
		
create view collection_stats_view as 
SELECT COLLECTION_ID::text AS COLLECTION,
	NFT_COUNT,
	FLOOR_PRICE
FROM ME_COLLECTION_STATS
UNION ALL
SELECT COLLECTION_ADDRESS AS COLLECTION,
	NFT_COUNT,
	FLOOR_PRICE
FROM COLLECTION_STATS;